import { useState } from 'react'
import Head from 'next/head'
import PropertyBox from '@/components/PropertyBox'
import DrawCanva from '@/components/DrawCanva'
import axios from 'axios'
import Image from 'next/image'

export default function Home() {
  const [maskImage, setMaskImage] = useState(null)
  const [imageUrl, setImageUrl] = useState(null)
  const [error, setError] = useState('')
  const [resultImage, setResultImage] = useState(null)
  const [loading, setLoading] = useState(false)

  const handleAcceptImage = async file => {
    const initData = await readAsDataURL(file)
    console.log(file)
    setImageUrl(initData)
    setError('')
  }

  const handleGenerate = async info => {
    if (!maskImage) {
      // show toast for image required!
      setError(`** Mask image is required **`)
      return
    }
    setLoading(true)

    // send as application/json
    axios
      .post('/api/generate', {
        ...info,
        width: 512,
        height: 512,
        image: imageUrl,
        mask: maskImage
      })
      .then(response => {
        if (response.status === 200) {
          const { data } = response
          if (data.status === 'success') {
            // show result image
            setResultImage(data.url)
          } else if (data.status === 'processing') {
            // show message for processing
          }
        }
      })
      .catch(err => {
        console.log(err)
      })
      .finally(() => {
        setLoading(false)
      })
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col md:flex-row min-h-screen gap-2 md:gap-0">
        <div className="w-full flex-1 flex items-center justify-center bg-slate-100">
          <div className="mb-10">
            {error && <p className="text-red-500 text-center">{error}</p>}
            <DrawCanva
              imageUrl={imageUrl}
              width={512}
              height={512}
              onDraw={data => {
                setMaskImage(data)
                setError('')
              }}
              isGenerating={loading}
            />
            {resultImage && (
              <>
                <hr />
                <Image
                  src={resultImage}
                  alt="inpainted image"
                  width={512}
                  height={512}
                />
              </>
            )}
          </div>
        </div>
        <div className="w-full md:w-[300px] max-w-full">
          <PropertyBox
            onImageDrop={handleAcceptImage}
            onGenerate={handleGenerate}
            isGenerating={loading}
          />
        </div>
      </div>
    </>
  )
}

function readAsDataURL(file) {
  return new Promise((resolve, reject) => {
    const fr = new FileReader()
    fr.onerror = reject
    fr.onload = () => {
      resolve(fr.result)
    }
    fr.readAsDataURL(file)
  })
}
